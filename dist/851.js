(()=>{"use strict";self.onmessage=async e=>{const{type:t,data:r,password:a}=e.data;try{let e;if("encrypt"===t)e=await(async(e,t)=>{const r=new TextEncoder,a=r.encode(e),s=crypto.getRandomValues(new Uint8Array(16)),n=await crypto.subtle.importKey("raw",r.encode(t),"PBKDF2",!1,["deriveBits","deriveKey"]),o=await crypto.subtle.deriveKey({name:"PBKDF2",salt:s,iterations:1e5,hash:"SHA-256"},n,{name:"AES-GCM",length:256},!1,["encrypt"]),c=crypto.getRandomValues(new Uint8Array(12)),i=await crypto.subtle.encrypt({name:"AES-GCM",iv:c},o,a),y=new Uint8Array(s.length+c.length+i.byteLength);return y.set(s,0),y.set(c,s.length),y.set(new Uint8Array(i),s.length+c.length),btoa(String.fromCharCode.apply(null,Array.from(y)))})(r,a);else{if("decrypt"!==t)throw new Error("Unknown worker message type");e=await(async(e,t)=>{try{const r=new TextEncoder,a=new TextDecoder,s=atob(e),n=new Uint8Array(s.length);for(let e=0;e<s.length;e++)n[e]=s.charCodeAt(e);const o=n.slice(0,16),c=n.slice(16,28),i=n.slice(28),y=await crypto.subtle.importKey("raw",r.encode(t),"PBKDF2",!1,["deriveBits","deriveKey"]),l=await crypto.subtle.deriveKey({name:"PBKDF2",salt:o,iterations:1e5,hash:"SHA-256"},y,{name:"AES-GCM",length:256},!1,["decrypt"]),d=await crypto.subtle.decrypt({name:"AES-GCM",iv:c},l,i);return a.decode(d)}catch(e){throw new Error("Decryption failed - incorrect password or corrupted file")}})(r,a)}self.postMessage({status:"success",result:e})}catch(e){self.postMessage({status:"error",message:e.message})}}})();