import React, { useState, useEffect } from 'react';

interface Cookie {
  name: string;
  value: string;
  domain: string;
  path: string;
  secure: boolean;
  httpOnly: boolean;
  expirationDate?: number;
}

const CookieManager: React.FC = () => {
  const [cookies, setCookies] = useState<Cookie[]>([]);
  const [searchTerm, setSearchTerm] = useState('');
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    loadCookies();
  }, []);

  const loadCookies = async () => {
    try {
      const [tab] = await chrome.tabs.query({ active: true, currentWindow: true });
      if (tab.url) {
        const url = new URL(tab.url);
        const siteCookies = await chrome.cookies.getAll({ domain: url.hostname });
        setCookies(siteCookies);
      }
    } catch (error) {
      console.error('Error loading cookies:', error);
    } finally {
      setLoading(false);
    }
  };

  const deleteCookie = async (cookie: Cookie) => {
    try {
      const [tab] = await chrome.tabs.query({ active: true, currentWindow: true });
      if (tab.url) {
        const url = new URL(tab.url);
        await chrome.cookies.remove({
          url: `${url.protocol}//${cookie.domain}${cookie.path}`,
          name: cookie.name
        });
        await loadCookies();
      }
    } catch (error) {
      console.error('Error deleting cookie:', error);
    }
  };

  const exportCookiesJSON = () => {
    const dataStr = JSON.stringify(cookies, null, 2);
    const dataUri = 'data:application/json;charset=utf-8,'+ encodeURIComponent(dataStr);
    
    const exportFileDefaultName = `cookies_${new Date().toISOString().split('T')[0]}.json`;
    
    const linkElement = document.createElement('a');
    linkElement.setAttribute('href', dataUri);
    linkElement.setAttribute('download', exportFileDefaultName);
    linkElement.click();
  };

  const exportToClipboard = async (format: 'json' | 'netscape') => {
    try {
      let content: string;
      
      if (format === 'json') {
        content = JSON.stringify(cookies, null, 2);
      } else {
        // Netscape format
        let netscapeData = "# Netscape HTTP Cookie File\n";
        netscapeData += "# Generated by 4ndr0tools\n";
        netscapeData += "# This file contains the HTTP cookies for a single site\n\n";
        
        cookies.forEach(cookie => {
          const domain = cookie.domain.startsWith('.') ? cookie.domain : '.' + cookie.domain;
          const domainFlag = cookie.domain.startsWith('.') ? 'TRUE' : 'FALSE';
          const path = cookie.path || '/';
          const secureFlag = cookie.secure ? 'TRUE' : 'FALSE';
          const expiration = cookie.expirationDate ? Math.floor(cookie.expirationDate) : '0';
          
          netscapeData += `${domain}\t${domainFlag}\t${path}\t${secureFlag}\t${expiration}\t${cookie.name}\t${cookie.value}\n`;
        });
        
        content = netscapeData;
      }
      
      await navigator.clipboard.writeText(content);
      
      // Show temporary feedback
      const button = document.activeElement as HTMLButtonElement;
      const originalText = button.textContent;
      button.textContent = 'âœ… Copied!';
      button.style.backgroundColor = '#10B981';
      
      setTimeout(() => {
        button.textContent = originalText;
        button.style.backgroundColor = format === 'json' ? '#15FFFF' : '#059669';
      }, 1500);
      
    } catch (error) {
      console.error('Error copying to clipboard:', error);
    }
  };

  const filteredCookies = cookies.filter(cookie =>
    cookie.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
    cookie.domain.toLowerCase().includes(searchTerm.toLowerCase())
  );

  if (loading) {
    return (
      <div className="hud-loading">
        <span className="hud-loading__spinner" aria-hidden="true" />
        <p>Scanning cookiesâ€¦</p>
      </div>
    );
  }

  return (
    <div className="hud-scroll space-y-4">
      <section className="hud-section">
        <div className="hud-section-header">
          <div>
            <h2 className="hud-section-title">Cookie tools</h2>
            <p className="hud-section-subtitle">One-click export to clipboard (JSON or Netscape)</p>
          </div>
          <span className="hud-chip">
            <span className="hud-chip__dot" />
            {filteredCookies.length} cookie{filteredCookies.length === 1 ? '' : 's'}
          </span>
        </div>

        <div className="hud-field-vertical">
          <span className="hud-label">Search & export</span>
          <div className="hud-input-stack">
            <input
              type="text"
              placeholder="Search cookiesâ€¦"
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="hud-input"
            />
            <div className="hud-toolbar hud-action-tray">
              <button
                type="button"
                onClick={() => exportToClipboard('json')}
                className="hud-btn"
                data-variant="accent"
                data-size="sm"
              >
                ðŸ“‹ Copy JSON
              </button>
              <button
                type="button"
                onClick={() => exportToClipboard('netscape')}
                className="hud-btn"
                data-variant="success"
                data-size="sm"
              >
                ðŸ“‹ Copy Netscape
              </button>
            </div>
          </div>
        </div>

        <p className="hud-subtext">Found {filteredCookies.length} cookie{filteredCookies.length === 1 ? '' : 's'} for this site</p>
      </section>

      <section className="hud-section">
        <div className="hud-stack">
          {filteredCookies.length === 0 ? (
            <div className="hud-empty">
              <p>No cookies found for this site.</p>
            </div>
          ) : (
            filteredCookies.map((cookie, index) => (
              <article key={index} className="hud-list-card">
                <div className="hud-list-card__header">
                  <div>
                    <h3 className="hud-list-card__title">{cookie.name}</h3>
                    <p className="hud-list-card__meta">Domain: {cookie.domain} â€¢ Path: {cookie.path}</p>
                  </div>
                  <button
                    type="button"
                    onClick={() => deleteCookie(cookie)}
                    className="hud-btn"
                    data-variant="danger"
                    data-size="xs"
                  >
                    Delete
                  </button>
                </div>

                <div className="hud-pill-row">
                  {cookie.secure && <span className="hud-pill" data-variant="success">Secure</span>}
                  {cookie.httpOnly && <span className="hud-pill" data-variant="info">HttpOnly</span>}
                  {cookie.expirationDate && (
                    <span className="hud-pill" data-variant="neutral">
                      Expires: {new Date(cookie.expirationDate * 1000).toLocaleDateString()}
                    </span>
                  )}
                </div>

                <p className="hud-subtext hud-subtext--mono">
                  Value: {cookie.value.length > 64 ? `${cookie.value.substring(0, 64)}â€¦` : cookie.value}
                </p>
              </article>
            ))
          )}
        </div>
      </section>
    </div>
  );
};

export default CookieManager;
