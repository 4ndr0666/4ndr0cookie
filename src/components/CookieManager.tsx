import React, { useState, useEffect } from 'react';

import { Cookie, CookieManagerModule } from '../modules/cookieManager';

const CookieManager: React.FC = () => {
  const [cookies, setCookies] = useState<Cookie[]>([]);
  const [searchTerm, setSearchTerm] = useState('');
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    loadCookies();
  }, []);

  const loadCookies = async () => {
    try {
      const siteCookies = await CookieManagerModule.getCookiesForCurrentTab();
      setCookies(siteCookies);
    } catch (error) {
      console.error('Error loading cookies:', error);
    } finally {
      setLoading(false);
    }
  };

  const deleteCookie = async (cookie: Cookie) => {
    try {
      await CookieManagerModule.deleteCookie(cookie);
      await loadCookies();
    } catch (error) {
      console.error('Error deleting cookie:', error);
    }
  };

  const exportCookiesJSON = () => {
    CookieManagerModule.exportCookies(cookies);
  };

  const exportToClipboard = async (format: 'json' | 'netscape') => {
    try {
      let content: string;
      
      if (format === 'json') {
        content = JSON.stringify(cookies, null, 2);
      } else {
        // Netscape format
        let netscapeData = "# Netscape HTTP Cookie File\n";
        netscapeData += "# Generated by 4ndr0tools\n";
        netscapeData += "# This file contains the HTTP cookies for a single site\n\n";
        
        cookies.forEach(cookie => {
          const domain = cookie.domain.startsWith('.') ? cookie.domain : '.' + cookie.domain;
          const domainFlag = cookie.domain.startsWith('.') ? 'TRUE' : 'FALSE';
          const path = cookie.path || '/';
          const secureFlag = cookie.secure ? 'TRUE' : 'FALSE';
          const expiration = cookie.expirationDate ? Math.floor(cookie.expirationDate) : '0';
          
          netscapeData += `${domain}\t${domainFlag}\t${path}\t${secureFlag}\t${expiration}\t${cookie.name}\t${cookie.value}\n`;
        });
        
        content = netscapeData;
      }
      
      await navigator.clipboard.writeText(content);
      
      // Show temporary feedback
      const button = document.activeElement as HTMLButtonElement;
      const originalText = button.textContent;
      button.textContent = 'âœ… Copied!';
      button.style.backgroundColor = '#10B980';
      
      setTimeout(() => {
        button.textContent = originalText;
        button.style.backgroundColor = format === 'json' ? '#15FFFF' : '#059669';
      }, 1500);
      
    } catch (error) {
      console.error('Error copying to clipboard:', error);
    }
  };

  const handleImportCookies = async (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (file) {
      const reader = new FileReader();
      reader.onload = async (e) => {
        try {
          const content = e.target?.result as string;
          const importedCookies = JSON.parse(content);
          await CookieManagerModule.importCookies(importedCookies);
          await loadCookies(); // Reload cookies after import
          alert('Cookies imported successfully!');
        } catch (error) {
          console.error('Error importing cookies:', error);
          alert('Failed to import cookies. Please ensure the file is a valid JSON.');
        }
      };
      reader.readAsText(file);
    }
  };

  const filteredCookies = cookies.filter(cookie =>
    cookie.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
    cookie.domain.toLowerCase().includes(searchTerm.toLowerCase())
  );

  if (loading) {
    return (
      <div className="flex items-center justify-center h-64">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500"></div>
      </div>
    );
  }

  return (
    <div className="min-h-full bg-gray-900 text-gray-100">
      {/* Header */}
      <div className="bg-gray-800 border-b border-gray-700 p-4">
        <h2 className="text-lg font-semibold mb-2" style={{color: '#15FFFF'}}>Cookie Tools</h2>
        <p className="text-sm text-gray-400">One-click export to clipboard (JSON/Netscape)</p>
      </div>

      <div className="p-4">
        <div className="mb-4">
          <div className="flex space-x-2 mb-3">
            <input
              type="text"
              placeholder="Search cookies..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="flex-1 px-3 py-2 border border-gray-600 bg-gray-700 text-gray-100 rounded-md focus:outline-none focus:ring-2 focus:ring-cyan-400"
            />
            <button
              onClick={() => exportToClipboard('json')}
              className="px-4 py-2 rounded-md font-medium transition-colors hover:opacity-80"
              style={{backgroundColor: '#15FFFF', color: '#111827'}}
            >
              ðŸ“‹ Copy JSON
            </button>
            <button
              onClick={() => exportToClipboard('netscape')}
              className="px-4 py-2 bg-green-600 text-white rounded-md hover:bg-green-500 transition-colors font-medium"
            >
              ðŸ“‹ Copy Netscape
            </button>
            <label htmlFor="import-cookies-file" className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-500 transition-colors font-medium cursor-pointer">
              ðŸ“¥ Import JSON
            </label>
            <input
              type="file"
              id="import-cookies-file"
              accept=".json"
              className="hidden"
              onChange={handleImportCookies}
            />
          </div>
          
          <div className="text-xs text-gray-500 mb-3">
            Found {filteredCookies.length} cookie{filteredCookies.length !== 1 ? 's' : ''} for this site
          </div>
        </div>

        <div className="space-y-2 max-h-80 overflow-y-auto">
          {filteredCookies.length === 0 ? (
            <div className="text-center text-gray-500 py-8">
              No cookies found for this site
            </div>
          ) : (
            filteredCookies.map((cookie, index) => (
              <div key={index} className="bg-gray-800 border border-gray-700 rounded-lg p-3 shadow-sm">
                <div className="flex justify-between items-start">
                  <div className="flex-1">
                    <div className="font-medium text-sm text-cyan-400">{cookie.name}</div>
                    <div className="text-xs text-gray-400 mt-1">
                      Domain: {cookie.domain} | Path: {cookie.path}
                    </div>
                    <div className="text-xs text-gray-500 mt-1">
                      {cookie.secure && <span className="bg-green-600 text-white px-1 rounded text-xs mr-1">Secure</span>}
                      {cookie.httpOnly && <span className="bg-blue-600 text-white px-1 rounded text-xs mr-1">HttpOnly</span>}
                      {cookie.expirationDate && <span className="text-gray-400">Expires: {new Date(cookie.expirationDate * 1000).toLocaleDateString()}</span>}
                    </div>
                    <div className="text-xs text-gray-400 mt-1 truncate">
                      Value: {cookie.value.length > 50 ? cookie.value.substring(0, 50) + '...' : cookie.value}
                    </div>
                  </div>
                  <button
                    onClick={() => deleteCookie(cookie)}
                    className="ml-2 px-2 py-1 bg-red-600 text-white text-xs rounded hover:bg-red-500 transition-colors"
                  >
                    Delete
                  </button>
                </div>
              </div>
            ))
          )}
        </div>
      </div>
    </div>
  );
};

export default CookieManager;
